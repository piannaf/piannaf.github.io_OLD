<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2010-11-18T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Array- and Link-based Data Structures</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/11/18/array-and-link-based-data-structures.html"/>
    <id>http://blog.url.com/article/2010/11/18/array-and-link-based-data-structures.html</id>
    <published>2010-11-18T09:00:00+09:00</published>
    <updated>2015-04-26T12:38:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The array-based data structures were partially written for us and we needed to
fix them to pass the given tests and ensure they will pass any other relevant
tests thrown at them. The link-based data structures had to be implemented from scratch, only the interfaces were given.&lt;/p&gt;

&lt;p&gt;This was an easy assignment since I had already written a linked-list in C the semester before and was working through CLRS at the time.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>University Course Information System</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/13/university-course-information-system.html"/>
    <id>http://blog.url.com/article/2010/07/13/university-course-information-system.html</id>
    <published>2010-07-13T09:00:00+09:00</published>
    <updated>2015-04-26T12:22:43+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A university course information system implemented in JSP with MySQL
connectivity. We had a choice of JSP or PHP and I chose JSP because of the two,
I prefer Java.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The focus of this project was to implement a course scheduling algorithm to
minimize clashes. I took a naive approach to the algorithm and a very
inefficient way of dealing with database connections. It is a proof of concept
that I am able to design and program a complex information system requiring
database connectivity, authentication and automation.&lt;/p&gt;

&lt;p&gt;See the specifications to all the pracs linked below:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Web Page Design — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_1.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Interactive Web Design — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_2.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dynamic Web Design — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_3v2.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Server Side Programming — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_4.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web Applications — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_5.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web Applications II — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_6.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Database Web Applications — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_7.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AJAX Web Applications — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_8.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web Application Data Exchange — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_9.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Full Web Application — &lt;a href="https://jmancine.files.wordpress.com/2010/07/infs3202_2010_prac_10.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Naive Spell Checker</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/12/naive-spell-checker.html"/>
    <id>http://blog.url.com/article/2010/07/12/naive-spell-checker.html</id>
    <published>2010-07-12T09:00:00+09:00</published>
    <updated>2015-04-25T10:41:21+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This naive spell checker was a three part project over the course of the
semester. This was very easy because I had taught myself C# the summer before.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Simply give it a dictionary and a document and it will tell you where you went
wrong in the document. It will also offer suggested words based on insertion,
deletion, substitution, and transposition errors (but not a combination of
errors).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Multi Player CLI Battleship</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/11/multi-player-cli-battleship.html"/>
    <id>http://blog.url.com/article/2010/07/11/multi-player-cli-battleship.html</id>
    <published>2010-07-11T09:00:00+09:00</published>
    <updated>2015-04-25T10:19:50+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The multi-player version of the
&lt;a href="/article/2010/07/09/single-player-cli-battleship.html"&gt;previous article&lt;/a&gt;. We were
not allowed to use multiple processes for either the client or the server so
there was a lot to learn about threading.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I had a lot of fun (and frustration) debugging this program. It wasn’t actually
as hard as it initially seemed.&lt;/p&gt;

&lt;p&gt;This was the fourth (and final) assigment I did for COMP2303/7306 while getting
my Masters of Information Technology at the University of Queensland.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Suspect</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/10/suspect.html"/>
    <id>http://blog.url.com/article/2010/07/10/suspect.html</id>
    <published>2010-07-10T09:00:00+09:00</published>
    <updated>2015-04-19T12:43:56+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Suspect, as the program for this assignment was called, taught me multi-process
programming and signal-handling.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Its basically an interpreter for a (very) small scripting language. The first
line of each scripts opens a child process and each successive line is a
command which allows interaction with the child process and the file system.&lt;/p&gt;

&lt;p&gt;The most fun I had with it was when I used Suspect to open another instance of
itself.&lt;/p&gt;

&lt;p&gt;This was the third assigment I did for COMP2303/7306 while getting my Masters
of Information Technology at the University of Queensland.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Single Player CLI Battleship</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/09/single-player-cli-battleship.html"/>
    <id>http://blog.url.com/article/2010/07/09/single-player-cli-battleship.html</id>
    <published>2010-07-09T09:00:00+09:00</published>
    <updated>2015-04-19T12:39:53+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;By creating a single-player implementation of the well-known game ‘battle ship’,
I learned about writing and compiling a C program which interacted with the
user and file-system.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This was the first assigment I did for COMP2303/7306 while getting my Masters
of Information Technology at the University of Queensland.&lt;/p&gt;
</content>
  </entry>
</feed>
