<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2010-07-12T09:00:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Naive Spell Checker</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/12/naive-spell-checker.html"/>
    <id>http://blog.url.com/article/2010/07/12/naive-spell-checker.html</id>
    <published>2010-07-12T09:00:00+09:00</published>
    <updated>2015-04-25T10:41:21+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This naive spell checker was a three part project over the course of the
semester. This was very easy because I had taught myself C# the summer before.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Simply give it a dictionary and a document and it will tell you where you went
wrong in the document. It will also offer suggested words based on insertion,
deletion, substitution, and transposition errors (but not a combination of
errors).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Multi Player CLI Battleship</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/11/multi-player-cli-battleship.html"/>
    <id>http://blog.url.com/article/2010/07/11/multi-player-cli-battleship.html</id>
    <published>2010-07-11T09:00:00+09:00</published>
    <updated>2015-04-25T10:19:50+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The multi-player version of the
&lt;a href="/article/2010/07/09/single-player-cli-battleship.html"&gt;previous article&lt;/a&gt;. We were
not allowed to use multiple processes for either the client or the server so
there was a lot to learn about threading.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I had a lot of fun (and frustration) debugging this program. It wasn’t actually
as hard as it initially seemed.&lt;/p&gt;

&lt;p&gt;This was the fourth (and final) assigment I did for COMP2303/7306 while getting
my Masters of Information Technology at the University of Queensland.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Suspect</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/10/suspect.html"/>
    <id>http://blog.url.com/article/2010/07/10/suspect.html</id>
    <published>2010-07-10T09:00:00+09:00</published>
    <updated>2015-04-19T12:43:56+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Suspect, as the program for this assignment was called, taught me multi-process
programming and signal-handling.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Its basically an interpreter for a (very) small scripting language. The first
line of each scripts opens a child process and each successive line is a
command which allows interaction with the child process and the file system.&lt;/p&gt;

&lt;p&gt;The most fun I had with it was when I used Suspect to open another instance of
itself.&lt;/p&gt;

&lt;p&gt;This was the third assigment I did for COMP2303/7306 while getting my Masters
of Information Technology at the University of Queensland.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Single Player CLI Battleship</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/07/09/single-player-cli-battleship.html"/>
    <id>http://blog.url.com/article/2010/07/09/single-player-cli-battleship.html</id>
    <published>2010-07-09T09:00:00+09:00</published>
    <updated>2015-04-19T12:39:53+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;By creating a single-player implementation of the well-known game ‘battle ship’,
I learned about writing and compiling a C program which interacted with the
user and file-system.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This was the first assigment I did for COMP2303/7306 while getting my Masters
of Information Technology at the University of Queensland.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SineMaster Lite</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/01/30/sinemaster-lite.html"/>
    <id>http://blog.url.com/article/2010/01/30/sinemaster-lite.html</id>
    <published>2010-01-30T09:00:00+09:00</published>
    <updated>2015-04-19T12:34:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;SineMaster Lite is the result of learning a lot of the features of C# as well as a substantial amount of .NET pertaining to WPF.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;After spending a lot of time &lt;a href="http://understanding-c-sharp.blogspot.com/"&gt;dissecting Microsoft sample code&lt;/a&gt;,
I wanted to try my hand at a simple program.  This is a milestone to a larger
project I planned: a game called SineMaster. In SineMaster, you would be given
the image of a waveform and need to reproduce it by combining sine waves.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>WPF Calculator</title>
    <link rel="alternate" href="http://blog.url.com/article/2010/01/14/wpf-calculator.html"/>
    <id>http://blog.url.com/article/2010/01/14/wpf-calculator.html</id>
    <published>2010-01-14T09:00:00+09:00</published>
    <updated>2015-03-30T22:02:13+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Continuing my quest to understand .NET and C#, I refactored out all the XAML
from &lt;a href="http://msdn.microsoft.com/en-us/library/ms771362.aspx"&gt;the original sample&lt;/a&gt;
on MSDN into pure C#.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It is a direct port so uses WPF and follows the same structure of the original
program.&lt;/p&gt;
</content>
  </entry>
</feed>
